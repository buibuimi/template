#include <stdio.h>
#include <cstring>
#include <algorithm>
using namespace std ;

const int MAXN = 100010 ;
int tree[20][MAXN] ;//表示每层每个位置的值
int sorted[MAXN] ;//已经排序好的数
int toleft[20][MAXN] ;//toleft[p][i] 表示 p 层从 1 到 i 有数分入左边


void Build (int l , int r , int dep)
{
    if (l == r) return ;
    int mid = (l + r) >> 1 ;
    int same = mid - l + 1 ;//表示等于中间值而且被分入左边的个数
    for (int i = l ; i <= r ; ++i)   //注意是 l, 不是 one
        if (tree[dep][i] < sorted[mid])
            --same ;
    int lpos = l ;
    int rpos = mid + 1 ;
    for (int i = l ; i <= r ; ++i)
    {
        if (tree[dep][i] < sorted[mid])
            tree[dep + 1][lpos++] = tree[dep][i] ;
        else if (tree[dep][i] == sorted[mid] && same > 0)
        {
            tree[dep + 1][lpos++] = tree[dep][i] ;
            --same ;
        }
        else
            tree[dep + 1][rpos++] = tree[dep][i] ;
        toleft[dep][i] = toleft[dep][l - 1] + lpos - l ;
    }
    Build (l , mid , dep + 1) ;
    Build (mid + 1 , r , dep + 1) ;
}

int Query(int L , int R , int l , int r , int dep , int k)
{
    if (l == r)
        return tree[dep][l] ;
    int mid = (L + R) >> 1 ;
    int cnt = toleft[dep][r] - toleft[dep][l - 1] ;
    if (cnt >= k)   //如果第k大去了左边
    {
        int newl = L + toleft[dep][l - 1] - toleft[dep][L - 1] ;
        int newr = newl + cnt - 1 ;
        return Query(L , mid , newl , newr , dep + 1 , k) ;
    }
    else
    {
        int newr = r + toleft[dep][R] - toleft[dep][r] ;
        int newl = newr - (r - l - cnt) ;
        return Query(mid + 1 , R , newl , newr , dep + 1 , k - cnt) ;
    }
}


int main ()
{
    int n , m ;
    while (scanf ("%d%d" , &n , &m) == 2)
    {
        memset (tree , 0 , sizeof (tree)) ;
        for (int i = 1 ; i <= n ; ++i)
        {
            scanf ("%d" , &tree[0][i]) ;
            sorted[i] = tree[0][i] ;
        }
        sort (sorted + 1 , sorted + 1 + n) ;
        Build (1 , n , 0) ;
        int s , t , k ;
        while (m--)
        {
            scanf ("%d%d%d" , &s , &t , &k) ;
            printf ("%d\n" , Query(1 , n , s , t , 0 , k)) ;
        }
    }
    return 0 ;
}

/*
10 10
1 9 2 5 3 6 4 7 8 10

*/
